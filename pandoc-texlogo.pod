=pod

=encoding UTF-8

This is the documentation for L<< pandoc-texlogo.pl || http://git.io/vLXwR >>.

=head1 NAME

pandoc-texlogo.pl - pandoc filter to display TeX logos intelligently.

=head1 VERSION

0.03

=head1 SYNOPSIS

    pandoc -F pandoc-texlogo.pl [OPTIONS] [-|FILE...]

=head1 DESCRIPTION

pandoc-texlogo.pl is a L<< pandoc|http://pandoc.org/ >> filter to help
display the logos for TeX, LaTeX etc. correctly in in LaTeX (including
when generating PDF!) and ConTeXt output while also rendering them
sensibly in other formats.

=head1 OPTIONS

In normal usage, as a pandoc filter, you need not and can not pass any
options. Nevertheless there are a few options which you can use when
invoking the script directly:

=head2 B<< --css >>

Will print the CSS code needed to render the HTML logos generated by
this script to STDOUT and then exit.

=head2 B<< -h >>, B<< --help >>

Will print some help.

=head2 B<< --man >>

Will display the full manual for the script.

=head1 HOW IT WORKS

If your pandoc-markdown input file contains inline code elements with a
class C<< .texlogo >> (or for backwards compatibility also C<< .logo >>)
like C<< `LaTeX`{.texlogo} >> (although the text of the 'code' --
hereafter the I<< CODETEXT >> -- can be anything) then this filter will
replace it with something it thinks makes sense in the current output
format:

=head2 If the output format is C<< latex >> or C<< context >>:

Will output a raw C<< tex >> element C<< \CODETEXT{} >> (i.e.
C<< `TeX`{.texlogo} >> -E<gt> C<< \TeX >>,
C<< `AnyThing`{.texlogo} >> -E<gt> C<< \AnyThing >> etc. -- no
validation is performed!)

=head2 If the output format is another supported format

The filter has predefined output strings for some output formats and
some _CODETEXT_s. Each C<< .texlogo >> code element will be replaced in
the pandoc AST with a raw markup element of the appropriate format.

If the filter has a special output string value associated with the
output format and the exact C<< CODETEXT >> the output string will be
set to that value. Otherwise if there is an output string value
associated with C<< TeX >> for that output format every occurrence of
the substring C<< TeX >> within the I<< CODETEXT >> with that value, so
that e.g. for HTML C<< `ConTeXt`{.texlogo} >> will become
C<< Con<span class="texlogo">T<sub>e</sub>t >> even if no special string
is associated with the I<< CODETEXT >> C<< ConTeXt >>.

The currently supported output formats and their _CODETEXT_s with
predefined raw markup replacement strings are:

=over

=item *

C<< html >>

(Actually any output format with the substring C<< html >> in the output
format name pandoc gives to the filter!)

=over

=item *

C<< TeX >>

=item *

C<< LaTeX >>

=item *

C<< LaTeX2e >>

=item *

C<< XeTeX >>

=item *

C<< XeLaTeX >>

=back

=back

=head2 Any other output format:

The code element will be replaced with a plain string element with a
text equal to the I<< CODETEXT >>, e.g. C<< `LaTeX`{.texlogo} >> will
become C<< LaTeX >> without any special formatting.

=head1 CSS

If the output format is HTML (Actually any output format with the
substring C<< html >> in the output format name pandoc gives to the
filter!) some CSS appropriate for rendering the HTML code for TeX logos
which this filter generates will be inserted into the metadata of your
document. More exactly these steps are performed:

=over

=item 1.

If the metadata entry C<< include-css >> does not exist it is created as
a metadata list.

=item 2.

If the metadata entry C<< include-css >> exists (or was just created)
and is a metadata list a metadata string element containing the
appropriate CSS code is added to it.

=back

You can now insert code like that shown L<<< under I<< In your HTML
template: >> in the SYNOPSIS|#In-your-HTML-template >>> into your HTML
template and the CSS code will be inserted into your standalone HTML
output as needed.

Alternatively you can invoce the script with the B<< --css >> option and
redirect the output to a file which you then link from your HTML
document:

    perl pandoc_texlogo.pl --css >texlogo.css

=head1 NEEDED CPAN MODULES

Install these with your favorite CPAN client. (try C<< perldoc cpan >>
on the commandline if you don't have one!)

=over

=item *

JSON

=item *

Data::Rmap

=item *

autovivification

=item *

indirect

=back

=head1 LICENSE

This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=head1 AUTHOR

Benct Philip Jonsson E<lt>bpjonsson@gmail.comE<gt>

=head1 COPYRIGHT

Copyright 2014- Benct Philip Jonsson

=head1 LICENSE

This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

